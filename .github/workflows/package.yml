# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Deploy

on:
  push:
    tags:
      - v[0-9]+\.[0-9]+\.[0-9]+
      - v[0-9]+\.[0-9]+\.[0-9]+-alpha-[0-9]+
      - v[0-9]+\.[0-9]+\.[0-9]+-alpha-[0-9]+
      - ci-test

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE_TO_ASSUME }}
  DOMAIN_NAME: ${{ secrets.DOMAIN_NAME }}
  GIT_ACTOR: ${{ github.actor }}
  GITHUB_TOKEN: ${{ github.token }}
  REPOSITORY_NAME: ${{ github.event.repository.name }}
  APICORE_CLIENT_ID: ${{ secrets.APICORE_CLIENT_ID }}
  APICORE_CLIENT_SECRET: ${{ secrets.APICORE_CLIENT_SECRET }}
  APICORE_BASE_URL: ${{ secrets.APICORE_BASE_URL }}
  APICORE_TEST_URL: ${{ secrets.APICORE_TEST_URL }}
  APICORE_USERNAME: ${{ secrets.APICORE_USERNAME }}
  APICORE_PASSWORD: ${{ secrets.APICORE_PASSWORD }}
  APICORE_EMAIL: ${{ secrets.APICORE_EMAIL }}
  APICORE_SERVICE_USERNAME: ${{ secrets.APICORE_SERVICE_USERNAME }}
  APICORE_SERVICE_PASSWORD: $${{ secrets.APICORE_SERVICE_PASSWORD }}
  APICORE_PUSH_USERNAME: ${{ secrets.APICORE_PUSH_USERNAME }}
  APICORE_PUSH_PASSWORD: ${{ secrets.APICORE_PUSH_PASSWORD }}
  AFPDECK_PUSH_URL: ${{ secrets.AFPDECK_PUSH_URL }}
  APICORE_USE_SHAREDSERVICE: ${{ secrets.APICORE_USE_SHAREDSERVICE }}
  USE_MONGODB: false
  MONGODB_URL: ${{ secrets.MONGODB_URL }}
  NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
  DEBUG: ${{ vars.DEBUG }}

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3.8.1
        with:
          node-version: 18.x
          registry-url: https://registry.npmjs.org/

      - name: Setup MongoDB
        uses: supercharge/mongodb-github-action@1.10.0
        with:
          mongodb-version: 6.0
          mongodb-username: supercharge
          mongodb-password: secret
          mongodb-db: afpdeck

      - name: Setup git
        shell: bash
        run: |
          git config --global user.name "${{ secrets.GIT_USER_NAME }}"
          git config --global user.email "${{ secrets.GIT_USER_EMAIL }}"

      - name: Build SDK
        shell: bash
        run: |
          TAG=${GITHUB_REF#refs/tags/v}

          if [ ${GITHUB_REF} != 'refs/tags/ci-test' ]; then
            npm version --allow-same-version --no-git-tag-version ${TAG}
          fi         

          # Get pkg for lamda
          pushd lambda
          npm i
          popd

          pushd sdk

          if [ ${GITHUB_REF} != 'refs/tags/ci-test' ]; then
            npm version --allow-same-version --no-git-tag-version ${TAG}
          fi         

          npm i
          npm run build

          popd
      - name: Test SDK
        shell: bash
        env:
          MONGODB_URL: mongodb://supercharge:secret@localhost:27017/
        run: |
          cd sdk
          npm run test

      - name: Package SDK
        if: ${{ github.ref != 'refs/tags/ci-test' }}
        shell: bash
        run: |
          cd sdk
          npm publish --access public

      - name: Prepare docker buildx
        shell: bash
        run: |
          docker buildx version;
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin;
          docker context create builders
  
      - name: Setup docker buildx
        uses: docker/setup-buildx-action@v3.0.0
        with:
          version: latest
          endpoint: builders
          use: true
      
      - name: Build standalone server docker image
        shell: bash
        run: |
          ./docker.sh ${GITHUB_REF#refs/tags/}

# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Deploy

on:
  push:
    tags:
      - v[0-9]+\.[0-9]+\.[0-9]+

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE_TO_ASSUME }}
  DOMAIN_NAME: ${{ secrets.DOMAIN_NAME }}
  GIT_ACTOR: ${{ github.actor }}
  GITHUB_TOKEN: ${{ github.token }}
  REPOSITORY_NAME: ${{ github.event.repository.name }}
  APICORE_CLIENT_ID: ${{ secrets.DOMAIN_NAME }}
  APICORE_CLIENT_SECRET: ${{ secrets.DOMAIN_NAME }}
  APICORE_BASE_URL: ${{ secrets.APICORE_BASE_URL }}
  APICORE_PROD_URL: ${{ secrets.APICORE_BASE_URL }}
  APICORE_USERNAME: ${{ secrets.APICORE_USERNAME }}
  APICORE_PASSWORD: ${{ secrets.APICORE_PASSWORD }}
  APICORE_EMAIL: ${{ secrets.APICORE_EMAIL }}
  APICORE_SERVICE_USERNAME: ${{ secrets.APICORE_SERVICE_USERNAME }}
  APICORE_SERVICE_PASSWORD: $${{ secrets.APICORE_SERVICE_PASSWORD }}
  APICORE_PUSH_USERNAME: ${{ secrets.APICORE_PUSH_USERNAME }}
  APICORE_PUSH_PASSWORD: ${{ secrets.APICORE_PUSH_PASSWORD }}
  AFPDECK_PUSH_URL: ${{ secrets.AFPDECK_PUSH_URL }}
  USE_MONGODB: false
  MONGODB_URL: ${{ secrets.MONGODB_URL }}
  NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Check environment
        shell: bash
        run: |
          [ -z "${AWS_ROLE_TO_ASSUME}" ] && (echo "AWS_ROLE_TO_ASSUME is missing" ; exit 1)
          [ -z "${AWS_REGION}" ] && (echo "AWS_REGION is missing" ; exit 1)
          [ -z "${DOMAIN_NAME}" ] && (echo "DOMAIN_NAME is missing" ; exit 1)
          echo "Every thing OK"
          exit

      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3.8.1
        with:
          node-version: 18.x
          registry-url: https://registry.npmjs.org/

      - name: Setup AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: backend-role-github-actions
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Package
        shell: bash
        run: |
          TAG=${GITHUB_REF#refs/tags/v}

            git config --global user.name "${{ secrets.GIT_USER_NAME }}"
            git config --global user.email "${{ secrets.GIT_USER_EMAIL }}"

            cd sdk
            npm version --allow-same-version --no-git-tag-version ${TAG}
            npm i
            npm run build
            npm publish --access public

      - name: Prepare docker buildx
        shell: bash
        run: |
          IMAGE_TAG=${GITHUB_REF#refs/tags/}
          echo "tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          docker buildx version;
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin;
          docker context create builders

      - name: Setup docker buildx
        uses: docker/setup-buildx-action@v3.0.0
        with:
          version: latest
          endpoint: builders
          use: true

      - name: Build docker image
        shell: bash
        run: |
          TAG=${GITHUB_REF#refs/tags/v}
          npm version --allow-same-version --no-git-tag-version ${TAG}
          ./docker.sh

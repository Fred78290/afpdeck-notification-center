AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  afpdeck-notification-center

  Lambda for afpdeck-notification-center

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 15

Parameters:
  LambdaArch:
    Type: String
    Default: arm64
  ApiDomainName:
    Type: String
    Default: afpdeck-notification-center.aldunelabs.fr
  PublicApiStageName:
    Type: String
    Default: api
  PublicApiGatewayName:
    Type: String
    Default: afpdeck-notification-center
  ACMCertificatARN:
    Type: String
    Default: ${ACM_CERTIFICATE_ARN}
  Route53ZoneID:
    Type: String
    Default: ${ROUTE53_ZONEID}
  CodeLocation:
    Type: String
    Default: lambda/
  ApiCoreClientID:
    Type: String
    Default: afpdeck
  ApiCoreClientSecret:
    Type: String
    Default: AAD18D12-CAF1-4DFB-90A1-49C6CB2FB82C
  ApiCoreBaseURL:
    Type: String
    Default: AAD18D12-CAF1-4DFB-90A1-49C6CB2FB82C
  DebugLambda:
    Type: String
    Default: 'false'
Resources:
#  AfpDeckNotificationCenterLambdaPermission:
#    Type: "AWS::Lambda::Permission"
#    DependsOn:
#    - AfpDeckNotificationCenterApi
#    - AfpDeckNotificationCenterFunction
#    Properties:
#      Action: lambda:InvokeFunction
#      FunctionName: !Ref AfpDeckNotificationCenterFunction
#      Principal: apigateway.amazonaws.com
#      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${AfpDeckNotificationCenterApi}/*/*/*"

  AfpDeckNotificationCenterApiAuthPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
    - AfpDeckNotificationCenterApi
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref AfpDeckNotificationCenterAuthFunction
      Principal: !GetAtt AfpDeckNotificationCenterAuthorizerRole.Arn

  AfpDeckNotificationCenterAuthorizerRole:
      Type: AWS::IAM::Role
      Properties: 
        RoleName: AfpDeckNotificationCenterAuthorizer
        Description: authorizer role
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - "apigateway.amazonaws.com"
            Action:
              - "sts:AssumeRole"
        ManagedPolicyArns: 
          - arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  AfpDeckNotificationCenterDomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      RegionalCertificateArn: !Ref ACMCertificatARN
      DomainName: !Ref ApiDomainName
      SecurityPolicy: TLS_1_2
      EndpointConfiguration:
        Types:
          - REGIONAL

  AfpDeckNotificationCenterRecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref Route53ZoneID
      RecordSets:
        - Name: !Ref ApiDomainName
          Type: A
          AliasTarget:
            HostedZoneId: !GetAtt AfpDeckNotificationCenterDomainName.RegionalHostedZoneId
            DNSName: !GetAtt AfpDeckNotificationCenterDomainName.RegionalDomainName

  AfpDeckNotificationCenterApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Ref PublicApiGatewayName
      Description: public rest api afpdeck notification center
      EndpointConfiguration:
        Type: REGIONAL
      OpenApiVersion: 3.0.1
      StageName: !Ref PublicApiStageName
      TracingEnabled: False
      BinaryMediaTypes:
        - "*~1*"
      AccessLogSetting:
        DestinationArn: !GetAtt AfpDeckNotificationCenterApiLogGroup.Arn
        Format: $context.extendedRequestId $context.identity.sourceIp $context.identity.caller $context.identity.user [$context.requestTime] "$context.httpMethod $context.resourcePath $context.protocol" $context.status $context.responseLength $context.requestId
      Auth:
        InvokeRole: !GetAtt AfpDeckNotificationCenterAuthorizerRole.Arn
        DefaultAuthorizer: AfpDeckNotificationCenterApiAuthorizer
        Authorizers:
          AfpDeckNotificationCenterApiAuthorizer:
            DisableFunctionDefaultPermissions: False
            FunctionPayloadType: REQUEST
            FunctionArn: !GetAtt AfpDeckNotificationCenterAuthFunction.Arn
            FunctionInvokeRole: !GetAtt AfpDeckNotificationCenterAuthorizerRole.Arn
            Identity:
              Headers:
                - Authorization

  AfpDeckNotificationCenterApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 1
      LogGroupName: /aws/apigateway/AfpDeckNotificationCenterApi

  AfpDeckNotificationCenterAuthLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 1
      LogGroupName: /aws/lambda/AfpDeckNotificationCenterAuthFunction

  AfpDeckNotificationCenterFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 1
      LogGroupName: /aws/lambda/AfpDeckNotificationCenterFunction

  AfpDeckNotificationCenterAuthFunction:
    Type: AWS::Serverless::Function
    DependsOn:
        - AfpDeckNotificationCenterAuthLogGroup
    Properties:
      FunctionName: AfpDeckNotificationCenterAuthFunction
      CodeUri: !Ref CodeLocation
      Handler: authorizer.authHandler
      Runtime: nodejs18.x
      Architectures:
        - !Ref LambdaArch
      Environment:
        Variables:
          NODE_OPTIONS: ' --enable-source-maps'
          APICORE_CLIENT_ID: !Ref ApiCoreClientID
          APICORE_CLIENT_SECRET: !Ref ApiCoreClientSecret
          APICORE_BASE_URL: !Ref ApiCoreBaseURL
          DEBUG_LAMBDA: !Ref DebugLambda
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
        - authorizer.ts

  AfpDeckNotificationCenterFunction:
    Type: AWS::Serverless::Function
    DependsOn:
        - AfpDeckNotificationCenterFunctionLogGroup
    Properties:
      CodeUri: !Ref CodeLocation
      FunctionName: AfpDeckNotificationCenterFunction
      Handler: app.apiHandler
      Runtime: nodejs18.x
      Architectures:
        - !Ref LambdaArch
      Events:
        Root:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /
            Method: ANY
            RestApiId: !Ref AfpDeckNotificationCenterApi
        Proxy:
          Type: Api
          Properties:
            RestApiId: !Ref AfpDeckNotificationCenterApi
            Path: /{proxy+}
            Method: ANY
      Environment:
        Variables:
          NODE_OPTIONS: ' --enable-source-maps'
          APICORE_CLIENT_ID: !Ref ApiCoreClientID
          APICORE_CLIENT_SECRET: !Ref ApiCoreClientSecret
          APICORE_BASE_URL: !Ref ApiCoreBaseURL
          DEBUG_LAMBDA: !Ref DebugLambda
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
        - app.ts

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name: !Sub ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0

  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName: !Ref ApplicationResourceGroup
      AutoConfigurationEnabled: True

  AfpDeckNotificationCenterApiBasePathMapping:
    DependsOn: AfpDeckNotificationCenterDomainName
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      BasePath: !Ref PublicApiStageName
      DomainName: !Ref ApiDomainName
      RestApiId: !Ref AfpDeckNotificationCenterApi
      Stage: !Ref AfpDeckNotificationCenterApiStage

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  AfpDeckNotificationCenterApi:
    Description: API Gateway endpoint URL for Prod stage for Afpdeck Notification Center function
    Value: !Sub "https://${AfpDeckNotificationCenterApi}.execute-api.${AWS::Region}.amazonaws.com/${AfpDeckNotificationCenterApiStage}/hello/"
  AfpDeckNotificationCenterFunction:
    Description: Afpdeck Notification Center Lambda Function ARN
    Value: !GetAtt AfpDeckNotificationCenterFunction.Arn
  #AfpDeckNotificationCenterFunctionIamRole:
  #  Description: Implicit IAM Role created for Afpdeck Notification Center function
  #  Value: !GetAtt AfpDeckNotificationCenterFunctionRole.Arn
  #AfpDeckNotificationCenterApiApiKey:
  #  Description: "You can find your API Key in the AWS console: (Put in the request HEADER as 'x-api-key')"
  #  Value: !Sub "https://console.aws.amazon.com/apigateway/home?region=${AWS::Region}#/api-keys/${AfpDeckNotificationCenterApiApiKey}"